{"version":3,"sources":["../src/negaposi-analyzer-ja.js"],"names":["debug","require","posiNegaRatio","posi","nega","zero","defaultOptions","unknownWordRank","positiveCorrections","negativeCorrections","posiNegaDict","module","exports","tokens","options","length","score","scoreToken","token","foundDictionaries","filter","dict","foundDict","find","rank","forEach"],"mappings":"AAAA;AACA;;AACA,IAAMA,QAAQC,QAAQ,OAAR,EAAiB,sBAAjB,CAAd;AACA;;;;;;AAMA,IAAMC,gBAAgB;AAClBC,UAAM,IADY;AAElBC,UAAM,KAFY;AAGlBC,UAAM;AAHY,CAAtB;AAKA,IAAMC,iBAAiB;AACnB;AACAC,qBAAiB,CAFE;AAGnB;AACAC,yBAAqB,CAJF;AAKnB;AACAC,yBAAqBP,cAAcC,IAAd,GAAqBD,cAAcE,IANrC;AAOnB;AACAM,kBAAcT,QAAQ,wBAAR;AARK,CAAvB;AAUA;;;;AAIAU,OAAOC,OAAP,GAAiB,UAASC,MAAT,EAA+B;AAAA,QAAdC,OAAc,uEAAJ,EAAI;;AAC5C,QAAID,OAAOE,MAAP,KAAkB,CAAtB,EAAyB;AACrB,eAAO,CAAP;AACH;AACD,QAAIC,QAAQ,CAAZ;AACA,QAAMT,kBAAkBO,QAAQP,eAAR,IAA2BD,eAAeC,eAAlE;AACA,QAAMG,eAAeI,QAAQJ,YAAR,IAAwBJ,eAAeI,YAA5D;AACA,QAAMD,sBAAsBK,QAAQL,mBAAR,IAA+BH,eAAeG,mBAA1E;AACA,QAAMD,sBAAsBM,QAAQN,mBAAR,IAA+BF,eAAeE,mBAA1E;AACAR,UAAM,aAAN,EAAqB;AACjBO,wCADiB;AAEjBE,gDAFiB;AAGjBD;AAHiB,KAArB;AAKA,QAAMS,aAAa,SAAbA,UAAa,CAACC,KAAD,EAAW;AAC1B;AACA,YAAMC,oBAAoBT,aAAaU,MAAb,CAAoB,gBAAQ;AAClD,mBAAOC,KAAK,SAAL,MAAoBH,MAAM,cAAN,CAApB,IAA6CG,KAAK,SAAL,MAAoBH,MAAM,SAAN,CAAjE,IACHG,KAAK,MAAL,MAAiBH,MAAM,MAAN,CADrB;AAEH,SAHyB,CAA1B;AAIA;AACA,YAAMI,YAAYH,kBAAkBJ,MAAlB,KAA6B,CAA7B,GACZI,kBAAkB,CAAlB,CADY,GAEZA,kBAAkBI,IAAlB,CAAuB;AAAA,mBAAQF,KAAK,SAAL,MAAoBH,MAAM,cAAN,CAA5B;AAAA,SAAvB,CAFN;AAGA,YAAII,SAAJ,EAAe;AACX,gBAAME,OAAOF,UAAU,MAAV,CAAb;AACAtB,kBAAMkB,MAAM,cAAN,CAAN,EAA6BM,IAA7B;AACA,gBAAIA,OAAO,CAAX,EAAc;AACV,uBAAOA,OAAOhB,mBAAd;AACH,aAFD,MAEO,IAAIgB,OAAO,CAAX,EAAc;AACjB,uBAAOA,OAAOf,mBAAd;AACH;AACD,mBAAOe,IAAP;AACH,SATD,MASO;AACH,mBAAOjB,eAAP;AACH;AACJ,KAtBD;AAuBAM,WAAOY,OAAP,CAAe,iBAAS;AACpBT,iBAASC,WAAWC,KAAX,CAAT;AACH,KAFD;AAGA,WAAOF,QAAQH,OAAOE,MAAtB;AACH,CAzCD","file":"negaposi-analyzer-ja.js","sourcesContent":["// MIT © 2017 azu\n\"use strict\";\nconst debug = require(\"debug\")(\"negaposi-analyzer-ja\");\n/**\n * それぞれの単語の数\n * posi: nega = 5122 : 49983\n * 1   : 1    = 1 : 0.102474841\n * @type {{good: number, bad: number, zero: number}}\n */\nconst posiNegaRatio = {\n    posi: 5122,\n    nega: 49983,\n    zero: 20\n};\nconst defaultOptions = {\n    // 辞書にない単語のスコア\n    unknownWordRank: 0,\n    // ポジティブな単語に対する補正値(スコアに乗算)\n    positiveCorrections: 1,\n    // ネガティブな単語に対する補正値(スコアに乗算)\n    negativeCorrections: posiNegaRatio.posi / posiNegaRatio.nega,\n    // 辞書の配列\n    posiNegaDict: require(\"../dict/pn_ja.dic.json\")\n};\n/**\n * @param {Object[]} tokens kuromoji.jsのtoken配列\n * @param {Object} options\n */\nmodule.exports = function(tokens, options = {}) {\n    if (tokens.length === 0) {\n        return 0;\n    }\n    let score = 0;\n    const unknownWordRank = options.unknownWordRank || defaultOptions.unknownWordRank;\n    const posiNegaDict = options.posiNegaDict || defaultOptions.posiNegaDict;\n    const negativeCorrections = options.negativeCorrections || defaultOptions.negativeCorrections;\n    const positiveCorrections = options.positiveCorrections || defaultOptions.positiveCorrections;\n    debug(\"Options: %o\", {\n        unknownWordRank,\n        negativeCorrections,\n        positiveCorrections\n    });\n    const scoreToken = (token) => {\n        // まずは緩く取得\n        const foundDictionaries = posiNegaDict.filter(dict => {\n            return dict[\"surface\"] === token[\"surface_form\"] && dict[\"reading\"] === token[\"reading\"] &&\n                dict[\"posi\"] === token[\"posi\"];\n        });\n        // 複数候補が出たときは厳しく判定\n        const foundDict = foundDictionaries.length === 1\n            ? foundDictionaries[0]\n            : foundDictionaries.find(dict => dict[\"surface\"] === token[\"surface_form\"]);\n        if (foundDict) {\n            const rank = foundDict[\"rank\"];\n            debug(token[\"surface_form\"], rank);\n            if (rank > 0) {\n                return rank * positiveCorrections;\n            } else if (rank < 0) {\n                return rank * negativeCorrections;\n            }\n            return rank;\n        } else {\n            return unknownWordRank;\n        }\n    };\n    tokens.forEach(token => {\n        score += scoreToken(token);\n    });\n    return score / tokens.length;\n};"]}